package com.luv2code.springdemo.config;

import java.beans.PropertyVetoException;

import javax.sql.DataSource;

import org.jboss.logging.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.PropertySource;
import org.springframework.core.env.Environment;
import org.springframework.transaction.annotation.EnableTransactionManagement;
import org.springframework.web.servlet.ViewResolver;
import org.springframework.web.servlet.config.annotation.EnableWebMvc;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;
import org.springframework.web.servlet.view.InternalResourceViewResolver;

import com.mchange.v2.c3p0.ComboPooledDataSource;

@Configuration
@EnableWebMvc
@EnableTransactionManagement
@ComponentScan("com.luv2code.springdemo")
@PropertySource({"classpath:persistence-mysql.properties","classpath:security-persistence-mysql.properties"})
public class DemoAppConfig extends WebMvcConfigurerAdapter {
	@Autowired
	private Environment env;
	
	private Logger logger = Logger.getLogger(getClass().getName());
	
	// define a bean for ViewResolver
	@Bean
	public ViewResolver viewResolver() {
		InternalResourceViewResolver viewResolver = new InternalResourceViewResolver();
		 viewResolver.setPrefix("/WEB-INF/view/");
		 viewResolver.setSuffix(".jsp");
		 return viewResolver;
	}
	
	@Bean
	public DataSource myDataSource() {
		 // create connection pool
		 ComboPooledDataSource myDataSource = new ComboPooledDataSource();
		 // set the jdbc driver
		 try {
		 myDataSource.setDriverClass("com.mysql.jdbc.Driver");
		 }
		 catch (PropertyVetoException exc) {
			 throw new RuntimeException(exc);
		 }
		 // for sanity's sake, let's log url and user ... just to make sure we are reading the data
		 logger.info("jdbc.url=" + env.getProperty("jdbc.url"));
		 logger.info("jdbc.user=" + env.getProperty("jdbc.user"));
		 
		 // set database connection props
		 myDataSource.setJdbcUrl(env.getProperty("jdbc.url"));
		 myDataSource.setUser(env.getProperty("jdbc.user"));
		 myDataSource.setPassword(env.getProperty("jdbc.password"));
		 
		 // set connection pool props
		 myDataSource.setInitialPoolSize(Integer.parseInt(env.getProperty("connection.pool.initialPoolSize")));
		 myDataSource.setMinPoolSize(Integer.parseInt(env.getProperty("connection.pool.minPoolSize")));
		 myDataSource.setMaxPoolSize(Integer.parseInt(env.getProperty("connection.pool.maxPoolSize")));
		 myDataSource.setMaxIdleTime(Integer.parseInt(env.getProperty("connection.pool.maxIdleTime")));
	
		 return myDataSource;
	}

}
